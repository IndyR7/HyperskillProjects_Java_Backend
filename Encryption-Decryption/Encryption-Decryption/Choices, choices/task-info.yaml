type: edu
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: |
    111122223333
  learner_created: true
- name: src/encryptdecrypt/UI.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.PrintWriter;
    import java.util.Arrays;
    import java.util.Scanner;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class UI {
        private final Scanner scanner;
        private final String outputFile;
        private final String mode;
        private final int key;
        private final String data;
        /* private final String letters = "abcdefghijklmnopqrstuvwxyz";
        private final String lettersEncrypted = "zyxwvutsrqponmlkjihgfedcba"; */

        public UI(Scanner scanner, String[] args) {
            this.scanner = scanner;
            this.mode = getMode(args);
            this.key = getKey(args);
            this.data = getInput(args);
            this.outputFile = getOutputFile(args);
        }

        public void start() {
            if (!containsOutputFile()) {
                switch (this.mode) {
                    case "enc" -> System.out.println(getEncryptedString(this.data, this.key));
                    case "dec" -> System.out.println(getDecryptedString(this.data, this.key));
                    default -> System.out.println("There is no such command!");
                }
            } else {
                switch (this.mode) {
                    case "enc" -> {
                        try (PrintWriter pw = new PrintWriter(this.outputFile)) {
                            pw.println(getEncryptedString(this.data, this.key));
                        } catch (Exception e) {
                            System.out.printf("Error: %s not found!", e.getMessage());
                        }
                    }
                    case "dec" -> {
                        try (PrintWriter pw = new PrintWriter(this.outputFile)) {
                            pw.println(getDecryptedString(this.data, this.key));
                        } catch (Exception e) {
                            System.out.printf("Error: %s not found!", e.getMessage());
                        }
                    }
                    default -> System.out.println("There is no such command!");
                }
            }
        }

        public String getEncryptedString(String text, int key) {
            StringBuilder encryptedString = new StringBuilder();
            for (char symbol : text.toCharArray()) {
                int code = symbol + key;
                char c = (char) code;
                encryptedString.append(c);
            }
            return encryptedString.toString();
        }

        public String getDecryptedString(String text, int key) {
            StringBuilder encryptedString = new StringBuilder();
            for (char symbol : text.toCharArray()) {
                int code = symbol - key;
                char c = (char) code;
                encryptedString.append(c);
            }
            return encryptedString.toString();

        }

        public boolean containsOutputFile() {
            return !this.outputFile.isEmpty();
        }

        public String getOutputFile(String[] args) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].contains("out")) {
                    return args[i + 1];
                }
            }
            return "";
        }

        public String getInput(String[] args) {
            if (Arrays.asList(args).contains("data")) {
                return getData(args);
            }
            for (int i = 0; i < args.length; i++) {
                if (args[i].contains("in")) {
                    try {
                        return Files.readString(Path.of(args[i + 1]));
                    } catch (Exception e) {
                        System.out.printf("Error: %s not found", e.getMessage());
                    }
                }
            }
            return "";
        }

        public String getData(String[] args) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].contains("data")) {
                    return args[i + 1];
                }
            }
            return "";
        }

        public int getKey(String[] args) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].contains("key")) {
                    return Integer.parseInt(args[i + 1]);
                }
            }
            return 0;
        }

        public static String getMode(String[] args) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].contains("mode")) {
                    return args[i + 1];
                }
            }
            return "enc";
        }

        /* public String getEncryptedString(String text) {
            StringBuilder encryptedString = new StringBuilder();
            for (String symbol : text.split("")) {
                if (!letters.contains(symbol)) {
                    encryptedString.append(symbol);
                    continue;
                }
                encryptedString.append(lettersEncrypted.charAt(letters.indexOf(symbol)));
            }
            return encryptedString.toString();
        } */
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5392#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 02 Jan 2023 13:51:15 UTC"
record: 6
