type: edu
files:
- name: test/tracker/SampleTest.java
  visible: true
  text: |
    package tracker;

    import org.junit.jupiter.api.Test;

    import static org.junit.jupiter.api.Assertions.*;

    public class SampleTest {

        @Test
        void test() {
            assertEquals(5, 2 + 3);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.1'
    }

    test {
        useJUnitPlatform()
    }
  learner_created: false
- name: test/LearningProgressTrackerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Collections;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Random;
    import java.util.Set;
    import java.util.function.Predicate;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;
    import java.util.stream.Stream;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class LearningProgressTrackerTest extends StageTest<String> {
        private static final Random rnd = new Random();

        @DynamicTest(order = 1)
        CheckResult testStartAndExit() {
            TestedProgram main = new TestedProgram();
            String output = main.start();
            expect(output).toContain(1).lines();
            if (incorrectString(output, "Learning Progress Tracker")) {
                return CheckResult.wrong("When started, your program " +
                        "should print \"Learning Progress Tracker\"");
            }

            if (!main.isWaitingInput()) {
                return CheckResult.wrong("After the start, your program should " +
                        "be ready to accept commands from the user");
            }

            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (!main.isWaitingInput()) {
                return CheckResult.wrong("Your program should keep running after the 'back' " +
                        "command is entered");
            }

            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should print the hint \"Enter 'exit' to exit the program.\"");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2, data = "getBlankInput")
        CheckResult testBlankInput(String input) {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute(input);
            expect(output).toContain(1).lines();
            if (incorrectString(output, "no input")) {
                return CheckResult.wrong("When the user enters an empty or blank " +
                        "string, your program should print \"No input.\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3, data = "getUnknownCommands")
        CheckResult testUnknownCommands(String input) {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute(input);
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "unknown", "command")) {
                return CheckResult.wrong("When an unknown command is entered, your " +
                        "program should display an error message: \"Unknown command!\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 4)
        CheckResult testAddStudents1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("add students");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output,
                    "enter", "student", "credentials", "back", "return")) {
                return CheckResult.wrong("When 'add students' command is entered, your " +
                        "program should display the prompt \"Enter student credentials or " +
                        "'back' to return:\"");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "incorrect", "credentials")) {
                return CheckResult.wrong("Expected output: \"Incorrect credentials.\", " +
                        "but your output was: " + output);
            }

            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", "0", "students", "added")) {
                return CheckResult.wrong("Expected: \"Total 0 students have been added.\", but " +
                        "your output was: " + output);
            }

            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student credentials");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult testAddStudents2() {
            TestedProgram main = new TestedProgram();
            main.start();

            main.execute("add students");
            for (String input : getCorrectCredentials()) {
                String output = main.execute(input);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "student", "added")) {
                    return CheckResult.wrong("Expected output: \"The student has been added.\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", "10", "students", "added")) {
                return CheckResult.wrong("Expected: \"Total 10 students have been added.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult testAddStudents3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            for (String[] args : getIncorrectCredentials()) {
                String output = main.execute(args[0]);
                expect(output).toContain(1).lines();
                if (incorrectString(output, args[1])) {
                    return CheckResult.wrong("Expected output: \"" + args[1] + "\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", "0", "students", "added")) {
                return CheckResult.wrong("Expected: \"Total 0 students have been added.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 7)
        CheckResult testFindAll1() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");
            main.execute("back");

            String output = main.execute("list");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "no", "found")) {
                return CheckResult.wrong("Expected: \"No students found.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 8)
        CheckResult testAddDoubles() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(12);
            for (String arg : credentials) {
                String output = main.execute(arg);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "student", "added")) {
                    return CheckResult.wrong("Expected output: \"The student has been added.\", but your " +
                            "output was: " + output);
                }

                output = main.execute(arg);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "this", "email", "already", "taken")) {
                    return CheckResult.wrong("Expected output: \"This email is already taken.\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", String.valueOf(credentials.size()), "students", "added")) {
                return CheckResult.wrong("Expected: \"Total " + credentials.size() + "students have been added.\", but " +
                        "your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 9)
        CheckResult testFindAll2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(12);
            for (String arg : credentials) {
                String output = main.execute(arg);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "student", "added")) {
                    main.stop();
                    return CheckResult.wrong("Expected output: \"The student has been added.\", but your " +
                            "output was: " + output);
                }
            }

            String output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "total", String.valueOf(credentials.size()), "students", "added")) {
                return CheckResult.wrong("Expected: \"Total " + credentials.size() + "students have been added.\", but " +
                        "your output was: " + output);
            }

            output = main.execute("list");
            List<String> lines = expect(output).toContain(credentials.size() + 1).lines();
            if (!lines.get(0).toLowerCase().contains("students")) {
                return CheckResult.wrong("Expected the header \"Students:\" but your first line was: " + lines.get(0));
            }

            List<String> ids = parseIds(lines);
            Set<String> uniqueIds = new HashSet<>(ids);
            if (uniqueIds.size() != ids.size()) {
                return CheckResult.wrong("Expected " + ids.size() +
                        " unique IDs but found only " + uniqueIds.size());
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult testBackFromAddPoints() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("add points");
            expect(output).toContain().lines();
            if (anyMissingKeywords(output, "enter", "id", "points", "back", "return")) {
                return CheckResult.wrong("When 'add points' command is entered, your program should print " +
                        "\"Enter an id and points or 'back' to return:\" but your output was: " + output);
            }

            main.execute("back");
            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student id and points");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult testStudentPoints1() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(6);
            for (String arg : credentials) {
                main.execute(arg);
            }

            main.execute("back");
            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            String[] points = getIncorrectPoints();
            for (String point : points) {
                output = main.execute(ids.get(0) + " " + point);
                expect(output).toContain().lines();
                if (anyMissingKeywords(output, "incorrect", "format")) {
                    return CheckResult.wrong("Expected output: \"Incorrect points format.\", but your output was: " + output);
                }
            }

            output = main.execute("imsurethereisnosuchstudentid 1 1 1 1");
            expect(output).toContain().lines();
            if (anyMissingKeywords(output, "no", "student", "found") ||
                    !output.contains("imsurethereisnosuchstudentid")) {
                return CheckResult.wrong("Expected output was: \"No student is found " +
                        "for id=imsurethereisnosuchstudentid.\" but your output was: " + output);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 12)
        CheckResult testStudentPoints2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(6);
            for (String arg : credentials) {
                main.execute(arg);
            }
            main.execute("back");

            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            String[] points = getCorrectPoints(6);

            for (int i = 0; i < points.length; i++) {
                output = main.execute(ids.get(i) + " " + points[i]);
                expect(output).toContain(1).lines();
                if (anyMissingKeywords(output, "points", "updated")) {
                    return CheckResult.wrong("Expected \"Points updated.\" but your output was " + output);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 13)
        CheckResult testBackFromFind() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("find");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "id", "back", "return")) {
                return CheckResult.wrong("When 'find' command is entered, you program should " +
                        "print \"Enter an id or 'back' to return:\", but your output was: " + output);
            }

            main.execute("back");
            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student id");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 14)
        CheckResult testFindByID() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            List<String> credentials = getRandomCredentials(5);
            for (String arg : credentials) {
                main.execute(arg);
            }
            main.execute("back");

            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            for (int i = 0; i < ids.size(); i++) {
                main.execute(String.format("%s %d %d %d %d", ids.get(i), i, i, i, i));
                main.execute(String.format("%s %d %d %d %d", ids.get(i), i, i, i, i));
            }

            main.execute("back");
            output = main.execute("find");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "id", "back", "return")) {
                return CheckResult.wrong("When 'find' command is entered, you program should " +
                        "print \"Enter an id or 'back' to return:\", but your output was: " + output);
            }

            for (int i = 0; i < ids.size(); i++) {
                output = main.execute(ids.get(i));
                expect(output).toContain(1).lines();
                String expected = String.format(
                        "%s points: Java=%d; DSA=%d; Databases=%d; Spring=%d",
                        ids.get(i), i * 2, i * 2, i * 2, i * 2
                );
                if (incorrectString(output, expected)) {
                    return CheckResult.wrong("Expected output: " + expected +
                            ", but your output was: " + output);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 15)
        CheckResult testBackFromStatistics() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("statistics");
            main.execute("back");
            output = main.execute("back");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should stop waiting for student id");
            }

            output = main.execute("exit");
            expect(output).toContain(1).lines();
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 16)
        CheckResult testStatistics1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output = main.execute("statistics");
            String[] lines = Arrays.stream(output.split("\n"))
                    .filter(Predicate.not(String::isBlank))
                    .toArray(String[]::new);
            String feedback = "When the \"statistics\" command is entered, your " +
                    "program must print: \"Type the name of a course to see details or 'back' " +
                    "to quit:\", but your output was: ";

            if (lines.length == 0) {
                return CheckResult.wrong(feedback);
            }

            if (anyMissingKeywords(lines[0], "course", "details", "back", "quit")) {
                return CheckResult.wrong(feedback + lines[0]);
            }

            if (lines.length < 7) {
                return CheckResult.wrong("Your program should print a header and 6 " +
                        "categories, but you printed only " + lines.length + " lines");
            }

            List<String> categories = List.of("Most popular: n/a", "Least popular: n/a",
                    "Highest activity: n/a", "Lowest activity: n/a", "Easiest course: n/a",
                    "Hardest course: n/a");
            for (int i = 0; i < categories.size(); i++) {
                if (incorrectString(lines[i + 1], categories.get(i))) {
                    return CheckResult.wrong("Expected: " + categories.get(i) +
                            ", but your output was " + lines[i + 1]);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 17)
        CheckResult testStatistics2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("statistics");

            List<String> courses = List.of("Java", "DSA", "Databases", "Spring");
            for (String course : courses) {
                String output = main.execute(course);
                String[] lines = output.split("\n");
                if (lines.length < 2) {
                    return CheckResult.wrong("Expected 2 lines, but your output was only " + lines.length + " lines.");
                }

                if (incorrectString(lines[0], course.toLowerCase())) {
                    return CheckResult.wrong("Your first line should be " + course + ", but your output was " + lines[0]);
                }

                if (anyMissingKeywords(lines[1], "id", "points", "completed")) {
                    return CheckResult.wrong("Your second line should be \"id\tpoints\tcompleted\", " +
                            "but your output was " + lines[1]);
                }
            }

            List<String> unknown = Arrays.stream(getUnknownCommands())
                    .filter(str -> courses.stream().noneMatch(it -> it.trim().equalsIgnoreCase(str)))
                    .collect(Collectors.toList());

            for (String course : unknown) {
                String output = main.execute(course);
                if (incorrectString(output, "unknown course")) {
                    return CheckResult.wrong("Expected output: \"Unknown course.\", but your output was: " + output);
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 18)
        CheckResult testStatistics3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("statistics");

            main.execute("back");
            if (!main.isWaitingInput()) {
                return CheckResult.wrong("Your program should keep running after the 'back' " +
                        "command is entered");
            }

            String output = main.execute("back");
            if (anyMissingKeywords(output, "enter", "exit", "program")) {
                return CheckResult.wrong("When 'back' command is entered your program " +
                        "should print the hint \"Enter 'exit' to exit the program.\"");
            }

            output = main.execute("exit");
            if (anyMissingKeywords(output, "bye")) {
                return CheckResult.wrong("When the 'exit' command is entered, " +
                        "your program should say bye to the user");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("After the 'exit' command has been entered, " +
                        "your program should stop working");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 19)
        CheckResult testCategories1() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            getRandomCredentials(4).forEach(main::execute);

            main.execute("back");
            String output = main.execute("list");
            List<String> lines = expect(output).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            for (String id : ids) {
                main.execute(String.format("%s 5 4 3 1", id));
            }

            main.execute("back");
            lines = expect(main.execute("statistics")).toContain().lines();

            // 7  lines including the header and 6 lines with the information
            if (lines.size() != 7) {
                StringBuilder outputString = new StringBuilder();
                lines.forEach(s -> outputString.append(s).append("\n"));
                return CheckResult.wrong("Expected header: " +
                        "Type the name of a course to see details or 'back' to quit" +
                        "and six lines with the following information: " +
                        "Most popular, Least popular, Highest activity, Lowest activity, Easiest course, Hardest course" +
                        "but your output was: " + outputString);
            }

            if (anyMissingKeywords(lines.get(1), "java", "dsa", "databases", "spring")) {
                return CheckResult.wrong("Expected most popular: Java, DSA, Databases, Spring, " +
                        "but your output was: " + lines.get(1));
            }

            if (!lines.get(2).toLowerCase().contains("n/a")) {
                return CheckResult.wrong("Expected least popular: n/a, " +
                        "but your output was: " + lines.get(2));
            }

            if (anyMissingKeywords(lines.get(3), "java", "dsa", "databases", "spring")) {
                return CheckResult.wrong("Expected top activity: Java, DSA, Databases, Spring, " +
                        "but your output was: " + lines.get(3));
            }

            if (!lines.get(4).contains("n/a")) {
                return CheckResult.wrong("Expected lowest activity: n/a, " +
                        "but your output was: " + lines.get(4));
            }

            if (anyMissingKeywords(lines.get(5), "java")) {
                return CheckResult.wrong("Expected easiest course: Java, " +
                        "but your output was: " + lines.get(5));
            }

            if (anyMissingKeywords(lines.get(6), "Spring")) {
                return CheckResult.wrong("Expected hardest course: Spring, " +
                        "but your output was: " + lines.get(6));
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 20)
        CheckResult testCategories2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            getRandomCredentials(4).forEach(main::execute);

            main.execute("back");
            List<String> lines = expect(main.execute("list")).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            main.execute(String.format("%s 10 10 10 10", ids.get(0)));
            main.execute(String.format("%s 5 5 5 5", ids.get(1)));
            main.execute(String.format("%s 5 5 5 5", ids.get(2)));
            main.execute(String.format("%s 2 2 2 2", ids.get(3)));

            main.execute("back");
            main.execute("statistics");

            List<String> linesJava = expect(main.execute("Java")).toContain(6).lines();
            List<String> linesDsa = expect(main.execute("DSA")).toContain(6).lines();
            List<String> linesDb = expect(main.execute("Databases")).toContain(6).lines();
            List<String> linesSpring = expect(main.execute("Spring")).toContain(6).lines();

            if (!linesJava.get(2).matches(".+\\s+10\\s+1\\.7\\s?%.*") ||
                    !linesJava.get(3).matches(".+\\s+5\\s+0\\.8\\s?%.*") ||
                    !linesJava.get(4).matches(".+\\s+5\\s+0\\.8\\s?%.*") ||
                    !linesJava.get(5).matches(".+\\s+2\\s+0\\.3\\s?%.*") ||
                    !linesJava.get(2).startsWith(ids.get(0)) ||
                    !linesJava.get(3).startsWith(ids.get(1)) && !linesJava.get(3).startsWith(ids.get(2)) ||
                    !linesJava.get(4).startsWith(ids.get(1)) && !linesJava.get(4).startsWith(ids.get(2)) ||
                    !linesJava.get(5).startsWith(ids.get(3)) ||
                    linesJava.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesJava.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your Java student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDsa.get(2).matches(".+\\s+10\\s+2\\.5\\s?%.*") ||
                    !linesDsa.get(3).matches(".+\\s+5\\s+1\\.3\\s?%.*") ||
                    !linesDsa.get(4).matches(".+\\s+5\\s+1\\.3\\s?%.*") ||
                    !linesDsa.get(5).matches(".+\\s+2\\s+0\\.5\\s?%.*") ||
                    !linesDsa.get(2).startsWith(ids.get(0)) ||
                    !linesDsa.get(3).startsWith(ids.get(1)) && !linesDsa.get(3).startsWith(ids.get(2)) ||
                    !linesDsa.get(4).startsWith(ids.get(1)) && !linesDsa.get(4).startsWith(ids.get(2)) ||
                    !linesDsa.get(5).startsWith(ids.get(3)) ||
                    linesDsa.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesDsa.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your DSA student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDb.get(2).matches(".+\\s+10\\s+2\\.1\\s?%.*") ||
                    !linesDb.get(3).matches(".+\\s+5\\s+1\\.0\\s?%.*") ||
                    !linesDb.get(4).matches(".+\\s+5\\s+1\\.0\\s?%.*") ||
                    !linesDb.get(5).matches(".+\\s+2\\s+0\\.4\\s?%.*") ||
                    !linesDb.get(2).startsWith(ids.get(0)) ||
                    !linesDb.get(3).startsWith(ids.get(1)) && !linesDb.get(3).startsWith(ids.get(2)) ||
                    !linesDb.get(4).startsWith(ids.get(1)) && !linesDb.get(4).startsWith(ids.get(2)) ||
                    !linesDb.get(5).startsWith(ids.get(3)) ||
                    linesDb.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesDb.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your Databases student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            if (!linesSpring.get(2).matches(".+\\s+10\\s+1\\.8\\s?%.*") ||
                    !linesSpring.get(3).matches(".+\\s+5\\s+0\\.9\\s?%.*") ||
                    !linesSpring.get(4).matches(".+\\s+5\\s+0\\.9\\s?%.*") ||
                    !linesSpring.get(5).matches(".+\\s+2\\s+0\\.4\\s?%.*") ||
                    !linesSpring.get(2).startsWith(ids.get(0)) ||
                    !linesSpring.get(3).startsWith(ids.get(1)) && !linesSpring.get(3).startsWith(ids.get(2)) ||
                    !linesSpring.get(4).startsWith(ids.get(1)) && !linesSpring.get(4).startsWith(ids.get(2)) ||
                    !linesSpring.get(5).startsWith(ids.get(3)) ||
                    linesSpring.get(3).startsWith(ids.get(1)) && ids.get(1).compareTo(ids.get(2)) >= 0 ||
                    linesSpring.get(3).startsWith(ids.get(2)) && ids.get(2).compareTo(ids.get(1)) >= 0) {
                return CheckResult.wrong("Your Spring student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 21)
        CheckResult testCategories3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("add students");

            main.execute("John Doe johnd@email.net");
            main.execute("Jane Spark jspark@yahoo.com");
            main.execute("back");

            List<String> lines = expect(main.execute("list")).toContain().lines();
            List<String> ids = parseIds(lines);

            main.execute("add points");
            main.execute(String.format("%s 8 7 7 5", ids.get(0)));
            main.execute(String.format("%s 7 6 9 7", ids.get(0)));
            main.execute(String.format("%s 6 5 5 0", ids.get(0)));
            main.execute(String.format("%s 8 0 8 6", ids.get(1)));
            main.execute(String.format("%s 7 0 0 0", ids.get(1)));
            main.execute(String.format("%s 9 0 0 5", ids.get(1)));

            main.execute("back");
            main.execute("statistics");

            List<String> linesJava = expect(main.execute("Java")).toContain(4).lines();
            List<String> linesDsa = expect(main.execute("DSA")).toContain(3).lines();
            List<String> linesDb = expect(main.execute("Databases")).toContain(4).lines();
            List<String> linesSpring = expect(main.execute("Spring")).toContain(4).lines();

            if (!linesJava.get(2).matches(".+\\s+24\\s+4\\.0\\s?%.*") ||
                    !linesJava.get(3).matches(".+\\s+21\\s+3\\.5\\s?%.*") ||
                    !linesJava.get(2).startsWith(ids.get(1)) || !linesJava.get(3).startsWith(ids.get(0))) {
                return CheckResult.wrong("Your Java student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDsa.get(2).matches(".+\\s+18\\s+4\\.5\\s?%.*") || !linesDsa.get(2).startsWith(ids.get(0))) {
                return CheckResult.wrong("Your DSA student list either contains incorrect data or is incorrectly sorted");
            }

            if (!linesDb.get(2).matches(".+\\s+21\\s+4\\.4\\s?%.*") ||
                    !linesDb.get(3).matches(".+\\s+8\\s+1\\.7\\s?%.*") ||
                    !linesDb.get(2).startsWith(ids.get(0)) || !linesDb.get(3).startsWith(ids.get(1))) {
                return CheckResult.wrong("Your Databases student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            if (!linesSpring.get(2).matches(".+\\s+12\\s+2\\.2\\s?%.*") ||
                    !linesSpring.get(3).matches(".+\\s+11\\s+2\\.0\\s?%.*") ||
                    !linesSpring.get(2).startsWith(ids.get(0)) || !linesSpring.get(3).startsWith(ids.get(1))) {
                return CheckResult.wrong("Your Spring student list either contains incorrect data " +
                        "or is incorrectly sorted");
            }

            return CheckResult.correct();
        }

        private boolean anyMissingKeywords(String output, String... keywords) {
            List<String> tokens = Arrays.asList(
                    output.trim().toLowerCase().split("\\W+")
            );

            return !tokens.containsAll(Arrays.stream(keywords)
                    .map(String::toLowerCase)
                    .collect(Collectors.toList()));
        }

        private boolean incorrectString(String output, String model) {
            String normalizedOutput = output.replaceAll("\\W+", "").toLowerCase();
            String normalizedModel = model.replaceAll("\\W+", "").toLowerCase();

            return !normalizedOutput.contains(normalizedModel);
        }

        private String[] getBlankInput() {
            return new String[]{"", "  ", "\t", " \t"};
        }

        private String[] getUnknownCommands() {
            return new String[]{"abc", "quit", "  brexit ", "exi  t", "?", "break",
                    "-exit", "Ctrl+C", "exit please", ":q", "java", "spring", "dsa", "databases"};
        }

        private String[] getCorrectCredentials() {
            return new String[]{"John Smith jsmith@hotmail.com", "Anny Doolittle anny.md@mail.edu",
                    "Jean-Claude O'Connor jcda123@google.net", "Mary Emelianenko 125367at@zzz90.z9",
                    "Al Owen u15da125@a1s2f4f7.a1c2c5s4", "Robert Jemison Van de Graaff robertvdgraaff@mit.edu",
                    "Ed Eden a1@a1.a1", "na'me s-u ii@ii.ii", "n'a me su aa-b'b ab@ab.ab", "nA me 1@1.1"};
        }

        private String[][] getIncorrectCredentials() {
            return new String[][]{
                    {"", "Incorrect credentials"}, {" \t", "Incorrect credentials."},
                    {"name surname", "Incorrect credentials."},
                    {"n surname email@email.xyz", "Incorrect first name."},
                    {"'name surname email@email.xyz", "Incorrect first name."},
                    {"-name surname email@email.xyz", "Incorrect first name."},
                    {"name- surname email@email.xyz", "Incorrect first name."},
                    {"name' surname email@email.xyz", "Incorrect first name."},
                    {"nam-'e surname email@email.xyz", "Incorrect first name."},
                    {"na'-me surname email@email.xyz", "Incorrect first name."},
                    {"na--me surname email@email.xyz", "Incorrect first name."},
                    {"na''me surname email@email.xyz", "Incorrect first name."},
                    {"námé surname email@email.xyz", "Incorrect first name."},
                    {"name s email@email.xyz", "Incorrect last name."},
                    {"name -surname email@email.xyz", "Incorrect last name."},
                    {"name 'surname email@email.xyz", "Incorrect last name."},
                    {"name surnam''e email@email.xyz", "Incorrect last name."},
                    {"name surn--ame email@email.xyz", "Incorrect last name."},
                    {"name s'-urname email@email.xyz", "Incorrect last name."},
                    {"name su-'rname email@email.xyz", "Incorrect last name."},
                    {"name surname- email@email.xyz", "Incorrect last name."},
                    {"name surname' email@email.xyz", "Incorrect last name."},
                    {"name surnámé email@email.xyz", "Incorrect last name."},
                    {"name surname emailemail.xyz", "Incorrect email."},
                    {"name surname email@emailxyz", "Incorrect email."},
                    {"name surname email@e@mail.xyz", "Incorrect email."},
            };
        }

        private String[] getIncorrectPoints() {
            return new String[]{"", "-1 1 1 1", "1 1 2 A", "1 1 1", "1 1 1 1 1"};
        }

        private String[] getCorrectPoints(int n) {
            return Stream.generate(String::new)
                    .limit(n)
                    .map(it -> String.format("%d %d %d %d", nextPoint(), nextPoint(), nextPoint(), nextPoint()))
                    .toArray(String[]::new);
        }

        private int nextPoint() {
            return rnd.nextInt(10) + 1;
        }

        private List<String> parseIds(List<String> lines) {
            try {
                return lines.stream()
                        .skip(1)
                        .map(String::trim)
                        .collect(Collectors.toList());
            } catch (Exception e) {
                throw new WrongAnswer("Error occurred while parsing your output " + e.getMessage());
            }
        }

        private List<String> generateNames(int n) {
            List<String> names = List.of("Shoshana Utica", "Marisa Firman", "Gwenette Anagnos", "Charlena Girardo",
                    "Alexina Belcher", "Karee Antoinetta", "Dolley Panther", "Elysha Quinlan", "Trixie Winer",
                    "Ricki Trovillion", "Amye Uriisa", "Hedwig Wally", "Gwenette Kironde", "Jermaine Naaman",
                    "Olga Rosanne", "Annecorinne Ause", "Aurie Dorisa", "Van Fawnia", "Carmella Campman",
                    "Francesca Francis", "Elwira Florrie", "Nonna Miko", "Natka Herculie", "Roxi Hett", "Brandise Hardan",
                    "Toby Bleier", "Dalia Gleeson", "Emelia Annnora", "Beatrisa Jegar", "Barbara-Anne Chicky",
                    "Ann Agnella", "Lebbie Alabaster", "Leola Whelan", "Starlin Griz", "Anjanette Uis", "Tasha Chem");

            List<String> selectedNames = new ArrayList<>(names);
            Collections.shuffle(selectedNames);
            return selectedNames.stream().limit(n).collect(Collectors.toList());
        }

        private List<String> generateEmails(int n) {
            return IntStream.rangeClosed(1, n).mapToObj(it -> "address" + it + "@mail.com").collect(Collectors.toList());
        }

        private List<String> getRandomCredentials(int n) {
            List<String> names = generateNames(n);
            List<String> emails = generateEmails(n);
            return IntStream.range(0, n)
                    .mapToObj(it -> String.format("%s %s", names.get(it), emails.get(it)))
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/tracker/Constants/Prompt.java
  visible: true
  text: |
    package tracker.Constants;

    public class Prompt {
        public static final String TITLE = "Learning Progress Tracker";
        public static final String EXIT_HINT = "Enter 'exit' to exit the program.";
        public static final String ENTER_CREDENTIALS = "Enter student credentials or 'back' to return:";
        public static final String ENTER_SCORES = "Enter an id and points or 'back' to return:";
        public static final String FIND_SCORES = "Enter an id or 'back' to return:";
        public static final String STUDENTS = "Students:\n";
        public static final String BYE = "Bye!";
        public static final String SUCCESSFUL_STUDENT_ADD = "The student has been added.";
        public static final String SUCCESSFUL_SCORE_ADD = "Points updated.";
        public static final String TOTAL_STUDENTS_ADDED = "Total %d students have been added.";
        public static final String INCORRECT_CREDENTIALS = "Incorrect credentials.";
        public static final String INCORRECT_FIRST_NAME = "Incorrect first name.";
        public static final String INCORRECT_LAST_NAME = "Incorrect last name.";
        public static final String INCORRECT_MAIL_ADDRESS = "Incorrect email.";
        public static final String INCORRECT_POINTS_FORMAT = "Incorrect points format.";
        public static final String UNSUCCESSFUL_STUDENT_ADD = "This email is already taken.";
        public static final String NO_STUDENTS_FOUND = "No students found.";
        public static final String NO_STUDENT_FOUND = "No student is found for id=%s.";
        public static final String NO_INPUT = "No input.";
        public static final String UNKNOWN_COMMAND = "Unknown command!";

        public static String getTotalAddedMessage(int total) {
            return String.format(TOTAL_STUDENTS_ADDED, total);
        }

        public static String getNoStudentFoundMessage(String id) {
            return String.format(NO_STUDENT_FOUND, id);
        }
    }
  learner_created: true
- name: src/tracker/Execution/UI.java
  visible: true
  text: |
    package tracker.Execution;

    import tracker.Constants.Command;
    import tracker.Constants.Prompt;
    import tracker.Courses.DSACourse;
    import tracker.Courses.DatabaseCourse;
    import tracker.Courses.JavaCourse;
    import tracker.Courses.SpringCourse;
    import tracker.Persons.Student;
    import tracker.Persons.Students;

    import java.util.Scanner;

    public class UI {
        private final Scanner scanner;

        public UI(Scanner scanner) {
            this.scanner = scanner;
        }

        public void start() {
            System.out.println(Prompt.TITLE);

            mainLoop:
            while (scanner.hasNextLine()) {
                String input = scanner.nextLine().trim();

                switch (input) {
                    case Command.EXIT:
                        break mainLoop;
                    case Command.EMPTY:
                        System.out.println(Prompt.NO_INPUT);
                        break;
                    case Command.ADD_STUDENTS:
                        addStudents();
                        break;
                    case Command.LIST:
                        System.out.println(getList());
                        break;
                    case Command.ADD_POINTS:
                        addPoints();
                        break;
                    case Command.FIND:
                        findScores();
                        break;
                    case Command.BACK:
                        System.out.println(Prompt.EXIT_HINT);
                        break;
                    default:
                        System.out.println(Prompt.UNKNOWN_COMMAND);
                }
            }

            System.out.println(Prompt.BYE);
        }

        private void addStudents() {
            System.out.println(Prompt.ENTER_CREDENTIALS);

            int total = 0;

            while (true) {
                String[] input = scanner.nextLine().trim().split(" ");

                if (input[0].equals(Command.BACK)) {
                    break;
                }

                if (InputHandler.isValidCredentialsInput(input)) {
                    String firstName = input[0];
                    String lastName = input[1];
                    String email = input[2];

                    if (Students.isUniqueEmail(email)) {
                        Students.addStudent(new Student(firstName, lastName, email));
                        total++;

                        System.out.println(Prompt.SUCCESSFUL_STUDENT_ADD);

                        continue;
                    }

                    System.out.println(Prompt.UNSUCCESSFUL_STUDENT_ADD);

                    continue;
                }

                System.out.println(InputHandler.getErrorMessage(Command.ADD_STUDENTS));
            }

            System.out.println(Prompt.getTotalAddedMessage(total));
        }

        private String getList() {
            if (Students.getStudents().isEmpty()) {
                return Prompt.NO_STUDENTS_FOUND;
            }

            return Students.getStudentsListedById();
        }

        private void findScores() {
            System.out.println(Prompt.FIND_SCORES);

            while (true) {
                String input = scanner.nextLine();

                if (input.equals(Command.BACK)) {
                    break;
                }

                try {
                    int id = Integer.parseInt(input);

                    if (Students.getStudent(id) != null) {
                        Student student = Students.getStudent(id);

                        System.out.println(student.getScores());

                        continue;
                    }

                } catch (Exception ignored) {

                }

                System.out.println(Prompt.getNoStudentFoundMessage(input));
            }
        }

        private void addPoints() {
            System.out.println(Prompt.ENTER_SCORES);

            while (true) {
                String[] input = scanner.nextLine().split(" ");

                if (input[0].equals(Command.BACK)) {
                    break;
                }

                if (InputHandler.isValidPointsInput(input)) {
                    int id = Integer.parseInt(input[0]);
                    int javaPoints = Integer.parseInt(input[1]);
                    int DSAPoints = Integer.parseInt(input[2]);
                    int DatabasePoints = Integer.parseInt(input[3]);
                    int SpringPoints = Integer.parseInt(input[4]);

                    JavaCourse.updateScore(id, javaPoints);
                    DSACourse.updateScore(id, DSAPoints);
                    DatabaseCourse.updateScore(id, DatabasePoints);
                    SpringCourse.updateScore(id, SpringPoints);

                    System.out.println(Prompt.SUCCESSFUL_SCORE_ADD);
                    continue;
                }

                System.out.println(InputHandler.getErrorMessage(Command.ADD_POINTS));
            }
        }
    }
  learner_created: true
- name: src/tracker/Persons/Person.java
  visible: true
  text: |
    package tracker.Persons;

    public interface Person {
        String getFirstName();

        void setFirstName(String firstName);

        String getLastName();

        void setLastName(String lastName);

        String getEmail();

        void setEmail(String email);

        int getId();
    }
  learner_created: true
- name: src/tracker/Constants/Command.java
  visible: true
  text: |
    package tracker.Constants;

    public class Command {
        public static final String ADD_STUDENTS = "add students";
        public static final String ADD_POINTS = "add points";
        public static final String LIST = "list";
        public static final String FIND = "find";
        public static final String BACK = "back";
        public static final String EXIT = "exit";
        public static final String EMPTY = "";
    }
  learner_created: true
- name: src/tracker/Courses/JavaCourse.java
  visible: true
  text: |-
    package tracker.Courses;

    import tracker.Constants.CourseNames;
    import tracker.Persons.Student;
    import tracker.Persons.Students;

    import java.util.HashMap;
    import java.util.Map;

    public class JavaCourse {
        private static final String name = CourseNames.JAVA;
        private static final Map<Integer, Student> studentsEnrolled = new HashMap<>();
        private static final Map<Integer, Integer> scores = new HashMap<>();

        public static String getName() {
            return name;
        }

        public static int getScore(int id) {
            return scores.getOrDefault(id, 0);
        }

        public static void updateScore(int id, int points) {
            if (Students.getStudent(id) != null) {
                int score = scores.getOrDefault(id, 0) + points;

                studentsEnrolled.putIfAbsent(id, Students.getStudent(id));
                scores.put(id, score);
            }
        }

        public static Map<Integer, Student> getStudentsEnrolled() {
            return studentsEnrolled;
        }

        public static Map<Integer, Integer> getScores() {
            return scores;
        }
    }
  learner_created: true
- name: src/tracker/Persons/Students.java
  visible: true
  text: |
    package tracker.Persons;

    import tracker.Constants.Prompt;

    import java.util.HashMap;
    import java.util.Map;

    public class Students {
        private static final Map<Integer, Student> students = new HashMap<>();
        private static final Map<String, Student> emails = new HashMap<>();

        public static void addStudent(Student student) {
            int id = student.getId();
            String email = student.getEmail();

            students.put(id, student);
            emails.put(email, student);
        }

        public static Map<Integer, Student> getStudents() {
            return students;
        }

        public static int getNextId() {
            return students.size() + 1;
        }

        public static Student getStudent(int id) {
            return students.getOrDefault(id, null);
        }

        public static String getStudentsListedById() {
            StringBuilder sbStudents = new StringBuilder();

            sbStudents.append(Prompt.STUDENTS);

            students.forEach((id, student) -> sbStudents.append(id).append("\n"));

            return sbStudents.toString().trim();
        }

        public static boolean isUniqueEmail(String email) {
            return !emails.containsKey(email);
        }
    }
  learner_created: true
- name: src/tracker/Courses/SpringCourse.java
  visible: true
  text: |-
    package tracker.Courses;

    import tracker.Constants.CourseNames;
    import tracker.Persons.Student;
    import tracker.Persons.Students;

    import java.util.HashMap;
    import java.util.Map;

    public class SpringCourse {
        private static final String name = CourseNames.SPRING;
        private static final Map<Integer, Student> studentsEnrolled = new HashMap<>();
        private static final Map<Integer, Integer> scores = new HashMap<>();

        public static String getName() {
            return name;
        }

        public static int getScore(int id) {
            return scores.getOrDefault(id, 0);
        }

        public static void updateScore(int id, int points) {
            if (Students.getStudent(id) != null) {
                int score = scores.getOrDefault(id, 0) + points;

                studentsEnrolled.putIfAbsent(id, Students.getStudent(id));
                scores.put(id, score);
            }
        }

        public static Map<Integer, Student> getStudentsEnrolled() {
            return studentsEnrolled;
        }

        public static Map<Integer, Integer> getScores() {
            return scores;
        }
    }
  learner_created: true
- name: src/tracker/Courses/DSACourse.java
  visible: true
  text: |-
    package tracker.Courses;

    import tracker.Constants.CourseNames;
    import tracker.Persons.Student;
    import tracker.Persons.Students;

    import java.util.HashMap;
    import java.util.Map;

    public class DSACourse {
        private static final String name = CourseNames.DSA;
        private static final Map<Integer, Student> studentsEnrolled = new HashMap<>();
        private static final Map<Integer, Integer> scores = new HashMap<>();

        public static String getName() {
            return name;
        }

        public static int getScore(int id) {
            return scores.getOrDefault(id, 0);
        }

        public static void updateScore(int id, int points) {
            if (Students.getStudent(id) != null) {
                int score = scores.getOrDefault(id, 0) + points;

                studentsEnrolled.putIfAbsent(id, Students.getStudent(id));
                scores.put(id, score);
            }
        }

        public static Map<Integer, Student> getStudentsEnrolled() {
            return studentsEnrolled;
        }

        public static Map<Integer, Integer> getScores() {
            return scores;
        }
    }
  learner_created: true
- name: src/tracker/Courses/DatabaseCourse.java
  visible: true
  text: |-
    package tracker.Courses;

    import tracker.Constants.CourseNames;
    import tracker.Persons.Student;
    import tracker.Persons.Students;

    import java.util.HashMap;
    import java.util.Map;

    public class DatabaseCourse {
        private static final String name = CourseNames.DATABASE;
        private static final Map<Integer, Student> studentsEnrolled = new HashMap<>();
        private static final Map<Integer, Integer> scores = new HashMap<>();

        public static String getName() {
            return name;
        }

        public static int getScore(int id) {
            return scores.getOrDefault(id, 0);
        }

        public static void updateScore(int id, int points) {
            if (Students.getStudent(id) != null) {
                int score = scores.getOrDefault(id, 0) + points;

                studentsEnrolled.putIfAbsent(id, Students.getStudent(id));
                scores.put(id, score);
            }
        }

        public static Map<Integer, Student> getStudentsEnrolled() {
            return studentsEnrolled;
        }

        public static Map<Integer, Integer> getScores() {
            return scores;
        }
    }
  learner_created: true
- name: src/tracker/Constants/CourseNames.java
  visible: true
  text: |
    package tracker.Constants;

    public class CourseNames {
        public static final String JAVA = "Java";
        public static final String DSA = "DSA";
        public static final String DATABASE = "Databases";
        public static final String SPRING = "Spring";
    }
  learner_created: true
- name: src/tracker/Constants/Pattern.java
  visible: true
  text: |
    package tracker.Constants;

    public class Pattern {
        public static final String FIRST_NAME = "([A-Za-z]+['-]?[A-Za-z]+)";
        public static final String LAST_NAME = "([A-Za-z]+[ '-]?)+[A-Za-z]+";
        public static final String MAIL_ADDRESS = "[A-Za-z0-9'.-]+@[A-Za-z0-9]+\\.[A-Za-z0-9]+";
        public static final String CREDENTIALS = FIRST_NAME + " " + LAST_NAME + " " + MAIL_ADDRESS;
        public static final String ID = "[0-9]+";
        public static final String POINTS = "(([1-9]|(10)) ){3}([1-9]|(10))";
    }
  learner_created: true
- name: src/tracker/Execution/InputHandler.java
  visible: true
  text: |
    package tracker.Execution;

    import tracker.Constants.Command;
    import tracker.Constants.Pattern;
    import tracker.Constants.Prompt;
    import tracker.Persons.Students;

    public class InputHandler {
        private static String[] credentialsInput;
        private static String[] pointsInput;

        public static boolean isValidCredentialsInput(String[] input) {
            credentialsInput = input;

            return isValidLength() && isValidFirstName()
                    && isValidLastName() && isValidEmail();
        }

        public static boolean isValidPointsInput(String[] input) {
            pointsInput = input;

            return isValidPointsFormat() && isValidId();
        }

        public static String getErrorMessage(String type) {
            if (type.matches(Command.ADD_STUDENTS)) {
                return getIncorrectCredentialsError();
            }

            if (type.matches(Command.ADD_POINTS)) {
                return getIncorrectPointsError();
            }

            return null;
        }

        private static String getIncorrectCredentialsError() {
            if (!isValidLength()) {
                return Prompt.INCORRECT_CREDENTIALS;
            }
            if (!isValidFirstName()) {
                return Prompt.INCORRECT_FIRST_NAME;
            }
            if (!isValidLastName()) {
                return Prompt.INCORRECT_LAST_NAME;
            }
            if (!isValidEmail()) {
                return Prompt.INCORRECT_MAIL_ADDRESS;
            }

            return null;
        }

        private static String getIncorrectPointsError() {
            if (!isValidPointsFormat()) {
                return Prompt.INCORRECT_POINTS_FORMAT;
            }

            if (!isValidId()) {
                String id = pointsInput[0];

                return Prompt.getNoStudentFoundMessage(id);
            }

            return null;
        }

        private static boolean isValidLength() {
            return credentialsInput.length >= 3;
        }

        private static boolean isValidFirstName() {
            String firstName = credentialsInput[0];

            return firstName.matches(Pattern.FIRST_NAME);
        }

        private static boolean isValidLastName() {
            StringBuilder sbLastName = new StringBuilder();

            for (int i = 1; i < credentialsInput.length - 1; i++) {
                sbLastName.append(credentialsInput[i]).append(" ");
            }

            return sbLastName.toString().trim().matches(Pattern.LAST_NAME);
        }

        private static boolean isValidEmail() {
            String email = credentialsInput[credentialsInput.length - 1];

            return email.matches(Pattern.MAIL_ADDRESS);
        }

        private static boolean isValidId() {
            try {
                int id = Integer.parseInt(pointsInput[0]);

                return Students.getStudent(id) != null;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        private static boolean isValidPointsFormat() {
            StringBuilder sbPoints = new StringBuilder();

            for (int i = 1; i < pointsInput.length; i++) {
                sbPoints.append(pointsInput[i]).append(" ");
            }

            return sbPoints.toString().trim().matches(Pattern.POINTS);
        }
    }
  learner_created: true
- name: src/tracker/Execution/Main.java
  visible: true
  text: |
    package tracker.Execution;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            UI userInterface = new UI(scanner);

            userInterface.start();
        }
    }
  learner_created: true
- name: src/tracker/Persons/Student.java
  visible: true
  text: |
    package tracker.Persons;

    import tracker.Courses.DSACourse;
    import tracker.Courses.DatabaseCourse;
    import tracker.Courses.JavaCourse;
    import tracker.Courses.SpringCourse;

    public class Student implements Person {
        private String firstName;
        private String lastName;
        private String email;
        private final int id;

        public Student(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.id = Students.getNextId();
        }

        @Override
        public String getFirstName() {
            return firstName;
        }

        @Override
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }

        @Override
        public String getLastName() {
            return lastName;
        }

        @Override
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        @Override
        public String getEmail() {
            return email;
        }

        @Override
        public void setEmail(String email) {
            this.email = email;
        }

        @Override
        public int getId() {
            return id;
        }

        public String getScores() {
            return String.format("%d points: %s=%d; %s=%d; %s=%d; %s=%d",
                    id, JavaCourse.getName(), JavaCourse.getScore(id),
                    DSACourse.getName(), DSACourse.getScore(id),
                    DatabaseCourse.getName(), DatabaseCourse.getScore(id),
                    SpringCourse.getName(), SpringCourse.getScore(id));
        }
    }
  learner_created: true
- name: src/tracker/Courses/Course.java
  visible: true
  learner_created: true
- name: src/tracker/Courses/Courses.java
  visible: true
  learner_created: true
- name: src/tracker/Constants/MaxScores.java
  visible: true
  learner_created: true
- name: src/tracker/Courses/CourseBase.java
  visible: true
  learner_created: true
- name: src/tracker/Courses/Statistics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/14399#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 13 May 2023 18:21:27 UTC"
record: 4
