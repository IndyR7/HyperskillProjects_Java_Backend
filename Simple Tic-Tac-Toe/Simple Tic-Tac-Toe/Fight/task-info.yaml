type: edu
custom_name: Fight!
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return FREE;
                default:
                    return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        } else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[]{
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                TicTacToeField ticTacToeField = new TicTacToeField(field);
                return ticTacToeField;
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

        public int getXCount() {

            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.X))
                .count();
        }

        public int getOCount() {
            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.O))
                .count();
        }
    }


    class Clue {
        int x, y;

        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static String[] inputs = new String[]{
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }

                if (Math.abs(curr.getXCount() - curr.getOCount()) > 1) {
                    return CheckResult.wrong("Wrong number of X's and O's in the field!");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (!(lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: src/tictactoe/GameBoard.java
  visible: true
  text: |
    package tictactoe;

    public class GameBoard {
        private String[][] gameBoard;
        private int x;
        private int y;
        private boolean parsable;


        public GameBoard(String input) {
            this.gameBoard = convertToField(input);
            parsable = false;
        }

        /*public void print() {
            printField();
            if (isDraw()) {
                System.out.println("Draw");
            } else if (!gameBoardIsLegal()) {
                System.out.println("Impossible");
            } else if (isNotFinished()) {
                System.out.println("Game not finished");
            } else {
                System.out.println(winner() + " wins");
            }
        }*/

        public void printField() {
            for (int x = 0; x < gameBoard.length; x++) {
                for (int y = 0; y < gameBoard[x].length; y++) {
                    System.out.print(gameBoard[x][y]);
                    if (x < 4) {
                        if (y == 8) {
                            System.out.println();
                        }
                    }
                }
            }
            System.out.println();
        }
        public void printError() {
            if (!parsable) {
                System.out.println("You should enter numbers!");
            } else if (!areLegalCoordinates()) {
                System.out.println("Coordinates should be from 1 to 3!");
            } else {
                System.out.println("This cell is occupied! Choose another one!");
            }
        }
        public String winner() {
            if (isWinner()) {
                if (xWins()) {
                    return "X";
                }
                return "O";
            }
            return "There is no winner!";
        }
        public boolean isNotFinished() {
            return !(isWinner() || isDraw()) && gameBoardIsLegal();
        }
        private boolean isDraw() {
            for (int x = 1; x < 4; x++) {
                for (int y = 2; y < 7; y += 2) {
                    if (this.gameBoard[x][y].equals("_") || this.gameBoard[x][y].equals(" ")) {
                        return false;
                    }
                }
            }
            if (isWinner()) {
                return false;
            }
            return true;
        }
        private boolean gameBoardIsLegal() {
            if (xWins() && oWins()) {
                return false;
            }
            int xCount = 0;
            int oCount = 0;
            for (int x = 1; x < 4; x++) {
                for (int y = 2; y < 7; y += 2) {
                    switch (this.gameBoard[x][y]) {
                        case "X":
                            xCount++;
                            break;
                        case "O":
                            oCount++;
                            break;
                    }
                }
            }
            return xCount - oCount < 2 && xCount - oCount > -2;
        }
        private boolean isWinner() {
            return xWins() || oWins();
        }

        private boolean xWins() {
            return checkRows("X") || checkColumns("X") || checkDiagonals("X");
        }

        private boolean oWins() {
            return checkRows("O") || checkColumns("O") || checkDiagonals("O");
        }
        private boolean checkRows(String input) {
            for (int x = 1; x < 4; x++) {
                if (gameBoard[x][2].equals(input) && gameBoard[x][4].equals(input) && gameBoard[x][6].equals(input)) {
                    return true;
                }
            }
            return false;
        }
        private boolean checkColumns(String input) {
            for (int y = 2; y < 7; y += 2) {
                if (gameBoard[1][y].equals(input) && gameBoard[2][y].equals(input) && gameBoard[3][y].equals(input)) {
                    return true;
                }
            }
            return false;
        }

        private boolean checkDiagonals(String input) {
            if (gameBoard[1][2].equals(input) && gameBoard[2][4].equals(input) && gameBoard[3][6].equals(input)) {
                return true;
            }
            if (gameBoard[1][6].equals(input) && gameBoard[2][4].equals(input) && gameBoard[3][2].equals(input)) {
                return true;
            }
            return false;
        }
        public boolean moveIsLegal(String input) {
            return isParsableToIntegers(input) && areLegalCoordinates() && isEmpty();
        }
        private boolean isParsableToIntegers(String input) {
            try {
                convertToCoordinates(input);
            } catch (Exception e) {
                return false;
            }
            return parsable = true;
        }
        private boolean areLegalCoordinates() {
            return x <= 3 && x >= 1 && y <= 6 && y >= 2;
        }

        private boolean isEmpty() {
            return gameBoard[this.x][this.y].equals(" ");
        }

        private void convertToCoordinates(String input) {
            String[] chars = input.split(" ");
            this.x = Integer.parseInt(chars[0]);
            this.y = Integer.parseInt(chars[1]) * 2;
        }
        private String[][] convertToField(String input) {
            String[] field = input.split("");
            String[][] layout = new String[5][9];
            int count = 0;

            for (int x = 1; x < 5; x++) {
                layout[x][0] = "|";
                layout[x][8] = "|";
            }
            for (int y = 0; y < 9; y++) {
                layout[0][y] = "-";
                layout[4][y] = "-";
            }
            for (int x = 1; x < 4; x++) {
                for (int y = 2; y < 7; y += 2) {
                    layout[x][y] = field[count];
                    if (layout[x][y].equals("_")) {
                        layout[x][y] = " ";
                    }
                    count++;
                }
            }
            for (int x = 1; x < 4; x++) {
                for (int y = 1; y < 9; y += 2) {
                    layout[x][y] = " ";
                }
            }
            return layout;
        }

        public void add() {
            gameBoard[x][y] = "X";
        }
    }
  learner_created: true
- name: src/tictactoe/UI.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;
    public class UI {
        private Scanner scanner;
        public UI(Scanner scanner) {
            this.scanner = scanner;
        }
        public void start() {
            String input = scanner.nextLine();
            GameBoard gameBoard = new GameBoard(input);
            gameBoard.printField();
            while(true) {
                String coordinates = scanner.nextLine();
                if (gameBoard.moveIsLegal(coordinates)) {
                        gameBoard.add();
                        gameBoard.printField();
                         break;
                    }
                else {
                    gameBoard.printError();
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5401#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Sun, 18 Dec 2022 12:16:10 UTC"
record: 5
