type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/GameBoard.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;
    public class GameBoard {
        private String[][] gameBoard;
        private int x;
        private int y;
        private boolean parsable;
        private String currentPlayer;


        public GameBoard() {
            this.gameBoard = convertToField();
            parsable = false;
            this.currentPlayer = "O";
        }
        public void takeTurn() {
            if (this.currentPlayer.equals("X")) {
                this.currentPlayer = "O";
                addAIMove();
            }
            else {
                this.currentPlayer = "X";
                addPlayerMove();
            }
            printField();
        }

        public void printResult() {
            printField();
            if (isDraw()) {
                System.out.println("Draw");
            } else if (!gameBoardIsLegal()) {
                System.out.println("Impossible");
            } else if (isNotFinished()) {
                System.out.println("Game not finished");
            } else {
                System.out.println(winner() + " wins");
            }
        }

        public void printField() {
            for (int x = 0; x < gameBoard.length; x++) {
                for (int y = 0; y < gameBoard[x].length; y++) {
                    System.out.print(gameBoard[x][y]);
                    if (x < 4) {
                        if (y == 8) {
                            System.out.println();
                        }
                    }
                }
            }
            System.out.println();
        }
        public void printError() {
            if (!parsable) {
                System.out.println("You should enter numbers!");
            } else if (!areLegalCoordinates()) {
                System.out.println("Coordinates should be from 1 to 3!");
            } else {
                System.out.println("This cell is occupied! Choose another one!");
            }
        }
        public String winner() {
            if (isWinner()) {
                if (xWins()) {
                    return "X";
                }
                return "O";
            }
            return "There is no winner!";
        }
        public boolean isNotFinished() {
            return !(isWinner() || isDraw()) && gameBoardIsLegal();
        }
        private boolean isDraw() {
            for (int x = 1; x < 4; x++) {
                for (int y = 2; y < 7; y += 2) {
                    if (this.gameBoard[x][y].equals("_") || this.gameBoard[x][y].equals(" ")) {
                        return false;
                    }
                }
            }
            if (isWinner()) {
                return false;
            }
            return true;
        }
        private boolean gameBoardIsLegal() {
            if (xWins() && oWins()) {
                return false;
            }
            int xCount = 0;
            int oCount = 0;
            for (int x = 1; x < 4; x++) {
                for (int y = 2; y < 7; y += 2) {
                    switch (this.gameBoard[x][y]) {
                        case "X":
                            xCount++;
                            break;
                        case "O":
                            oCount++;
                            break;
                    }
                }
            }
            return xCount - oCount < 2 && xCount - oCount > -2;
        }
        private boolean isWinner() {
            return xWins() || oWins();
        }

        private boolean xWins() {
            return checkRows("X") || checkColumns("X") || checkDiagonals("X");
        }

        private boolean oWins() {
            return checkRows("O") || checkColumns("O") || checkDiagonals("O");
        }
        private boolean checkRows(String input) {
            for (int x = 1; x < 4; x++) {
                if (gameBoard[x][2].equals(input) && gameBoard[x][4].equals(input) && gameBoard[x][6].equals(input)) {
                    return true;
                }
            }
            return false;
        }
        private boolean checkColumns(String input) {
            for (int y = 2; y < 7; y += 2) {
                if (gameBoard[1][y].equals(input) && gameBoard[2][y].equals(input) && gameBoard[3][y].equals(input)) {
                    return true;
                }
            }
            return false;
        }

        private boolean checkDiagonals(String input) {
            if (gameBoard[1][2].equals(input) && gameBoard[2][4].equals(input) && gameBoard[3][6].equals(input)) {
                return true;
            }
            if (gameBoard[1][6].equals(input) && gameBoard[2][4].equals(input) && gameBoard[3][2].equals(input)) {
                return true;
            }
            return false;
        }
        public boolean moveIsLegal(String input) {
            return isParsableToIntegers(input) && areLegalCoordinates() && isEmpty();
        }
        private boolean isParsableToIntegers(String input) {
            try {
                convertToCoordinates(input);
            } catch (Exception e) {
                return false;
            }
            return parsable = true;
        }
        private boolean areLegalCoordinates() {
            return x <= 3 && x >= 1 && y <= 6 && y >= 2;
        }

        private boolean isEmpty() {
            return gameBoard[this.x][this.y].equals(" ");
        }

        private void convertToCoordinates(String input) {
            String[] chars = input.split(" ");
            this.x = Integer.parseInt(chars[0]);
            this.y = Integer.parseInt(chars[1]) * 2;
        }
        private String[][] convertToField() {
            String[][] layout = new String[5][9];
            for (int x = 1; x < 5; x++) {
                layout[x][0] = "|";
                layout[x][8] = "|";
            }
            for (int y = 0; y < 9; y++) {
                layout[0][y] = "-";
                layout[4][y] = "-";
            }
            for (int x = 1; x < 4; x++) {
                for (int y = 2; y < 7; y += 2) {
                    layout[x][y] = " ";
                    if (layout[x][y].equals("_")) {
                        layout[x][y] = " ";
                    }
                }
            }
            for (int x = 1; x < 4; x++) {
                for (int y = 1; y < 9; y += 2) {
                    layout[x][y] = " ";
                }
            }
            return layout;
        }
        private void addAIMove() {
            while (true) {
                int xCoordinate = new Random().nextInt(3 - 1 + 1) + 1;
                int yCoordinate = new Random().nextInt(3 - 1 + 1) + 1;
                String coordinates = String.format("%d %d", xCoordinate, yCoordinate);
                if (moveIsLegal(coordinates)) {
                    gameBoard[x][y] = currentPlayer;
                    break;
                }
            }
        }

        private void addPlayerMove() {
            gameBoard[x][y] = "X";
        }
    }
  learner_created: true
- name: src/tictactoe/UI.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class UI {
        private Scanner scanner;
        boolean userPlaying = true;

        public UI(Scanner scanner) {
            this.scanner = scanner;
        }

        public void start() {
            GameBoard gameBoard = new GameBoard();
            gameBoard.printField();
            while (gameBoard.isNotFinished()) {
                if (userPlaying) {
                    System.out.println("Enter the coordinates:");
                    String coordinates = scanner.nextLine();
                    if (gameBoard.moveIsLegal(coordinates)) {
                        gameBoard.takeTurn();
                        userPlaying = false;
                    } else {
                        gameBoard.printError();
                    }
                    continue;
                }
                System.out.println("Making move level \"easy\"");
                gameBoard.takeTurn();
                userPlaying = true;
            }
            gameBoard.printResult();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7436#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 06 Jan 2023 16:53:55 UTC"
record: 3
